@page "/{ViewRoute}"

@inherits DynamicBaseView

@using System.Linq.Dynamic.Core

<PageTitle>@Module.PluralName</PageTitle>

@if(ViewIsReady && RouteIsValid && Entity is not null)
{
    <h3>@Module.PluralName</h3>

    <RadzenDataGrid @bind-Value=@selectedItems Data="@data" TItem="IDictionary<string, object>" ColumnWidth="200px"
                AllowFiltering="true" IsLoading="Loading" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true">
        <HeaderTemplate>
            <RadzenButton Click=@(args => Create()) Text="Crear" ButtonStyle="ButtonStyle.Primary" />
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="IDictionary<string, object>" Width="100px" Title="Acciones" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="Item">
                    <div class="d-flex justify-content-around">
                        <RadzenButton Click=@(args => OnEdit()) ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.ExtraSmall" >
                            <div>
                                <i class="fa-solid fa-pen"></i>
                            </div>
                        </RadzenButton>
                        <RadzenButton Click=@(args => OnDelete()) ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall">
                            <div>
                                <i class="fa-solid fa-trash"></i>
                            </div>
                        </RadzenButton>
                        <RadzenButton Click=@(args => OnDetail()) ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.ExtraSmall">
                            <div>
                                <i class="fa-solid fa-eye"></i>
                            </div>
                        </RadzenButton>
                    </div>
                </Template>
            </RadzenDataGridColumn>
            @foreach (var column in columns)
            {
                <RadzenDataGridColumn Width="200px" @key=@column.Key Title="@TranslatorService.GetMessage($"{Entity.GetType().Name}.{@column.Key}")" Type="column.Value"
                                    Property="@GetColumnPropertyExpression(column.Key, column.Value)">
                    <Template>
                        @context[@column.Key]
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
}else if(ViewIsReady && !RouteIsValid)
{
    <p>Ruta inv√°lida</p>
}
else
{
    <p>Cargando...</p>
}

@code {
    IList<IDictionary<string, object>> selectedItems;
    public IEnumerable<IDictionary<string, object?>> data { get; set; }

    public IDictionary<string, Type> columns { get; set; }
    bool Loading {get; set;}

    public string GetColumnPropertyExpression(string name, Type type)
    {
        var expression = $@"it[""{name}""].ToString()";

        if (type == typeof(int))
        {
            return $"int.Parse({expression})";
        }
        else if (type == typeof(DateTime))
        {
            return $"DateTime.Parse({expression})";
        }
        else if (type.IsEnum)
        {
            return $@"Int32(Enum.Parse(it[""{name}""].GetType(), {expression}))";
        }

        return expression;
    }

    private async Task InitView()
    {
        if(Loading)
            return;

        Loading = true;
        ViewIsReady = true;
        LastViewRoute = ViewRoute;
        RouteIsValid = ApiService.EndPointIsSaved(ViewRoute);

        if(RouteIsValid)
        {
            SearchModule();
        }

        SetEntity();
        columns = Module.GridColumns;

        StateHasChanged();

        var Data = await Module.GetData();
        var EntityType = Entity.GetType();

        data = Data.Select(i =>
        {
            var row = new Dictionary<string, object?>();

            foreach (var column in columns)
            {
                var Value = EntityType.GetProperty(column.Key)!
                    .GetValue(i);
                row.Add(
                    column.Key,
                    Value
                );
            }

            return row;
        });

        Loading = false;

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _ = InitView();

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if(ViewRoute != LastViewRoute)
        {
            _ = InitView();
            StateHasChanged();
        }

        base.OnParametersSet();
    }

    void Create()
    {
        NavigationManager.NavigateTo($"{ViewRoute}/create");
    }

    void OnEdit()
    {

    }

    void OnDelete()
    {

    }

    void OnDetail()
    {
        
    }
}